DOM Manipulation in JavaScript
English
DOM Manipulation refers to the process of dynamically changing the content, structure, and style of a web page using JavaScript. The Document Object Model (DOM) represents a web page as a tree of nodes, where each node corresponds to an element, attribute, or text in the HTML document. By manipulating the DOM, developers can create interactive and dynamic web experiences.

Key Concepts and Methods:

Selecting Elements:

getElementById(): Selects an element by its ID.
javascript
Copy code
const element = document.getElementById('myId');
getElementsByClassName(): Selects all elements with a specific class.
javascript
Copy code
const elements = document.getElementsByClassName('myClass');
querySelector(): Selects the first element that matches a CSS selector.
javascript
Copy code
const element = document.querySelector('.myClass');
querySelectorAll(): Selects all elements that match a CSS selector.
javascript
Copy code
const elements = document.querySelectorAll('.myClass');
Changing Content:

innerHTML: Sets or gets the HTML content of an element.
javascript
Copy code
element.innerHTML = '<p>New Content</p>';
textContent: Sets or gets the text content of an element.
javascript
Copy code
element.textContent = 'New Text';
Modifying Attributes:

setAttribute(): Sets the value of an attribute on an element.
javascript
Copy code
element.setAttribute('src', 'image.jpg');
getAttribute(): Gets the value of an attribute on an element.
javascript
Copy code
const src = element.getAttribute('src');
Changing Styles:

style: Sets the CSS style of an element.
javascript
Copy code
element.style.color = 'red';
Adding and Removing Elements:

appendChild(): Adds a new child element.
javascript
Copy code
const newElement = document.createElement('div');
element.appendChild(newElement);
removeChild(): Removes a child element.
javascript
Copy code
element.removeChild(childElement);
Event Handling:

addEventListener(): Attaches an event handler to an element.
javascript
Copy code
element.addEventListener('click', () => {
  alert('Element clicked!');
});
Bangla (বাংলা)
DOM Manipulation বলতে বোঝানো হয় জাভাস্ক্রিপ্ট ব্যবহার করে ওয়েব পেজের কন্টেন্ট, স্ট্রাকচার এবং স্টাইল ডাইনামিকভাবে পরিবর্তন করার প্রক্রিয়া। ডকুমেন্ট অবজেক্ট মডেল (DOM) ওয়েব পেজকে নোডের একটি ট্রি হিসেবে উপস্থাপন করে, যেখানে প্রতিটি নোড একটি এলিমেন্ট, অ্যাট্রিবিউট বা টেক্সটকে প্রতিনিধিত্ব করে। DOM ম্যানিপুলেশন করে ডেভেলপাররা ইন্টারেক্টিভ এবং ডাইনামিক ওয়েব এক্সপেরিয়েন্স তৈরি করতে পারে।

প্রধান কনসেপ্ট এবং মেথডগুলো:

এলিমেন্ট নির্বাচন করা:

getElementById(): একটি এলিমেন্টকে এর আইডি দ্বারা নির্বাচন করে।
javascript
Copy code
const element = document.getElementById('myId');
getElementsByClassName(): একটি নির্দিষ্ট ক্লাসের সমস্ত এলিমেন্টকে নির্বাচন করে।
javascript
Copy code
const elements = document.getElementsByClassName('myClass');
querySelector(): প্রথম এলিমেন্টকে নির্বাচন করে যা একটি CSS সিলেক্টরের সাথে মিলে যায়।
javascript
Copy code
const element = document.querySelector('.myClass');
querySelectorAll(): সমস্ত এলিমেন্টকে নির্বাচন করে যা একটি CSS সিলেক্টরের সাথে মিলে যায়।
javascript
Copy code
const elements = document.querySelectorAll('.myClass');
কন্টেন্ট পরিবর্তন করা:

innerHTML: একটি এলিমেন্টের HTML কন্টেন্ট সেট বা গেট করে।
javascript
Copy code
element.innerHTML = '<p>New Content</p>';
textContent: একটি এলিমেন্টের টেক্সট কন্টেন্ট সেট বা গেট করে।
javascript
Copy code
element.textContent = 'New Text';
অ্যাট্রিবিউট পরিবর্তন করা:

setAttribute(): একটি এলিমেন্টের উপর একটি অ্যাট্রিবিউটের মান সেট করে।
javascript
Copy code
element.setAttribute('src', 'image.jpg');
getAttribute(): একটি এলিমেন্টের উপর একটি অ্যাট্রিবিউটের মান গেট করে।
javascript
Copy code
const src = element.getAttribute('src');
স্টাইল পরিবর্তন করা:

style: একটি এলিমেন্টের CSS স্টাইল সেট করে।
javascript
Copy code
element.style.color = 'red';
এলিমেন্ট যোগ এবং সরানো:

appendChild(): একটি নতুন চাইল্ড এলিমেন্ট যোগ করে।
javascript
Copy code
const newElement = document.createElement('div');
element.appendChild(newElement);
removeChild(): একটি চাইল্ড এলিমেন্ট সরায়।
javascript
Copy code
element.removeChild(childElement);
ইভেন্ট হ্যান্ডলিং:

addEventListener(): একটি এলিমেন্টের সাথে একটি ইভেন্ট হ্যান্ডলার সংযুক্ত করে।
javascript
Copy code
element.addEventListener('click', () => {
  alert('Element clicked!');
});
By understanding and using these concepts and methods, you can effectively manipulate the DOM to create dynamic and interactive web pages.








